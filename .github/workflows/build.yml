name: Build

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint
        pip install -r requirements.txt

    - name: Lint with pylint
      run: pylint --rcfile=./.pylintrc --output-format=colorized --reports=y mimus


  unittest:
    name: Unit Test
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 3
      matrix:
        python-version: [3.5, 3.6, 3.7]

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox codecov

    - name: Run unit tests with coverage
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
        COVERALLS_PARALLEL: true
      run: |
        tox -e "py${PYTHON_VERSION//./}"

    - name: Upload coverage to Codecov
      if: matrix.python-version == 3.7
      env:
        CODECOV_TOKEN: ${{ secrets.codecovRepoToken }}
      run: codecov -F unittest


  functest:
    name: Functional Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox

    - name: Run functional tests
      run: tox -e behave

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [lint, unittest, functest]

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox

    - name: Release new version
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.pypiToken }}
      run: tox -e release
